1. #[cfg(windows)] {
    anything executed here will be run strickly on windows, will not run on linux
}

2. #[cfg(target_os = "linux")] {
    anything in here will be executed on linux, and will not run on windows
}

3. to get a string from an command 

    let cmd_output: Result<std::process::Output, std::io::Error> =                       //sets up command    
            std::process::Command::new("C:\\Program Files\\crosec\\cbmem")               //tells the function what the command is 
                .creation_flags(0x08000000)                                              //starts cmd/terminal hidden so the user does not see it (you will never see cmd/terminal in dev mode)
                .args(["-c1"])                                                           //sets arguments for command Example: (['arg1', 'arg2', 'argetc...'])
                .output();                                                               //grabs the output of the command if needed (this flag is not needed)
        let output: String = match cmd_output {                                          //this section is only necessary if you want an output, if you dont you can omit it
            Ok(output) => String::from_utf8_lossy(&output.stdout).to_string(),           //converts console to string
            Err(e) => {                                                                  //gives a function able to error instead of crashing, Highly reccomended espically for debugging
                println!("cbmemError `{}`.", e);
                String::from("") // This match returns a blank string.
            }
        };
        return String::from(output);                                                    //returns a string, Make sure you have "-> String" for it to return as a string or rust will not compile


4. async fn example_function() -> String {                                             //what your function should look like if you want a string (read 3 lines above)

}

6. let _ = std::process::Command::new("C:\\Program Files\\crosec\\ectool")
            .creation_flags(0x08000000)
            .args(["fanduty", "100"])
            .output();

    (this is how you just execute a command)

7. to call function from javascript add the name to the main function under invoke handler in rust and in javascript (only works if the type is a module) use invoke('function name')
